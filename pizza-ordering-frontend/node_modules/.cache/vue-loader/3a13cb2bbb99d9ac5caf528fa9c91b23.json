{"remainingRequest":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\node_modules\\vue-loader\\dist\\index.js??ruleSet[0].use[1]!C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\Charts\\LineChart.vue?vue&type=template&id=c4f8f9c0","dependencies":[{"path":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\Charts\\LineChart.vue","mtime":1631199440562},{"path":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\node_modules\\vue-loader\\dist\\templateLoader.js","mtime":1628298225000},{"path":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\node_modules\\vue-loader\\dist\\index.js","mtime":1628298225000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGNhbnZhcyByZWY9InJvb3QiIC8+Cg=="},{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\Charts\\LineChart.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC","file":"C:/Users/dev/Desktop/vue-basic/pizza-ordering-app/src/components/Charts/LineChart.vue","sourceRoot":"","sourcesContent":["<template>\n  <canvas ref=\"root\" />\n</template>\n\n<script>\nimport { ref, watch, computed, onMounted } from 'vue'\nimport {\n  Chart,\n  LineElement,\n  PointElement,\n  LineController,\n  LinearScale,\n  CategoryScale,\n  Tooltip\n} from 'chart.js'\n\nexport default {\n  name: 'LineChart',\n  props: {\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n  setup (props) {\n    const root = ref(null)\n\n    let chart\n\n    Chart.register(LineElement, PointElement, LineController, LinearScale, CategoryScale, Tooltip)\n\n    onMounted(() => {\n      chart = new Chart(root.value, {\n        type: 'line',\n        data: props.data,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              display: false\n            },\n            x: {\n              display: true\n            }\n          },\n          plugins: {\n            legend: {\n              display: false\n            }\n          }\n        }\n      })\n    })\n\n    const chartData = computed(() => props.data)\n\n    watch(chartData, data => {\n      if (chart) {\n        chart.data = data\n        chart.update()\n      }\n    })\n\n    return {\n      root\n    }\n  }\n}\n</script>\n"]}]}