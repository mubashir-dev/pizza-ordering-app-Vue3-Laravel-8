{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nvar _hoisted_1 = {\n  class: \"flex items-stretch justify-start relative\"\n};\nvar _hoisted_2 = {\n  class: \"inline-flex\"\n};\nvar _hoisted_3 = [\"accept\"];\nvar _hoisted_4 = {\n  key: 0\n};\nvar _hoisted_5 = {\n  class: \"inline-flex px-4 py-2 justify-center bg-gray-100 border-gray-200 border rounded-r\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_jb_button = _resolveComponent(\"jb-button\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"label\", _hoisted_2, [_createVNode(_component_jb_button, {\n    as: \"a\",\n    label: \"Upload\",\n    icon: $setup.mdiUpload,\n    color: \"info\",\n    class: _normalizeClass({\n      'rounded-r-none': $setup.file\n    })\n  }, null, 8\n  /* PROPS */\n  , [\"icon\", \"class\"]), _createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"input\",\n    class: \"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\",\n    accept: $props.accept,\n    onInput: _cache[0] || (_cache[0] = function () {\n      return $options.upload && $options.upload.apply($options, arguments);\n    })\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_3)]), $setup.file ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString($setup.file.name), 1\n  /* TEXT */\n  )])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\FilePicker.vue"],"names":[],"mappings":";;;AACO,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;;;;;AAgBL,EAAA,KAAK,EAAC;;;;;uBAjBhB,mBAAA,CAmBM,KAnBN,EAAA,UAAA,EAmBM,CAlBJ,mBAAA,CAcQ,OAdR,EAAA,UAAA,EAcQ,CAbN,YAAA,CAME,oBANF,EAME;AALA,IAAA,EAAE,EAAC,GAKH;AAJA,IAAA,KAAK,EAAC,QAIN;AAHC,IAAA,IAAI,EAAE,MAAA,CAAA,SAGP;AAFA,IAAA,KAAK,EAAC,MAEN;AADC,IAAA,KAAK,EAAA,eAAA,CAAA;AAAA,wBAAsB,MAAA,CAAA;AAAtB,KAAA;AACN,GANF,E,IAAA,E;;AAAA,I,iBAAA,CAaM,EANN,mBAAA,CAKkB,OALlB,EAKkB;AAJhB,IAAA,IAAI,EAAC,MAIW;AAHhB,IAAA,GAAG,EAAC,OAGY;AAFhB,IAAA,KAAK,EAAC,gFAEU;AADf,IAAA,MAAM,EAAE,MAAA,CAAA,MACO;AAAf,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,MAAA,IAAA,QAAA,CAAA,MAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAAU,GALlB,E,IAAA,E;;AAAA,I,UAAA,CAMM,CAdR,CAkBI,EAHO,MAAA,CAAA,I,kBAAX,mBAAA,CAEM,KAFN,EAEM,UAFN,EAEM,CADJ,mBAAA,CAAsH,MAAtH,EAAA,UAAA,EAAsH,gBAAA,CAAnB,MAAA,CAAA,IAAA,CAAK,IAAc,CAAtH,EAA4G;AAAA;AAA5G,GACI,CAFN,C,qCAGI,CAnBN,C","sourcesContent":["<template>\n  <div class=\"flex items-stretch justify-start relative\">\n    <label class=\"inline-flex\">\n      <jb-button\n        as=\"a\"\n        label=\"Upload\"\n        :icon=\"mdiUpload\"\n        color=\"info\"\n        :class=\"{ 'rounded-r-none': file }\"\n      />\n      <input\n        type=\"file\"\n        ref=\"input\"\n        class=\"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\"\n        :accept=\"accept\"\n        @input=\"upload\">\n    </label>\n    <div v-if=\"file\">\n      <span class=\"inline-flex px-4 py-2 justify-center bg-gray-100 border-gray-200 border rounded-r\">{{ file.name }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { mdiUpload } from '@mdi/js'\nimport JbButton from '@/components/JbButton'\n\nexport default {\n  name: 'FilePicker',\n  components: {\n    JbButton\n  },\n  props: {\n    modelValue: [Object, File, Array],\n    label: String,\n    icon: String,\n    accept: {\n      type: String,\n      default: null\n    }\n  },\n  emits: ['update:modelValue'],\n  setup (props) {\n    const file = ref(props.modelValue)\n\n    return {\n      file,\n      mdiUpload\n    }\n  },\n  methods: {\n    upload (event) {\n      const value = event.target.files || event.dataTransfer.files\n\n      this.file = value[0]\n      this.$emit('update:modelValue', this.file)\n\n      // Use this as an example for handling file uploads\n      // let formData = new FormData()\n      // formData.append('file', this.file)\n\n      // axios\n      //   .post(window.routeMediaStore, formData, {\n      //     headers: {\n      //       'Content-Type': 'multipart/form-data'\n      //     },\n      //     onUploadProgress: this.progressEvent\n      //   })\n      //   .then(r => {\n      //\n      //   })\n      //   .catch(err => {\n      //\n      //   })\n    }//,\n    // progressEvent (progressEvent) {\n    //   this.uploadPercent = Math.round(\n    //     (progressEvent.loaded * 100) / progressEvent.total\n    //   )\n    // }\n  },\n  watch: {\n    modelValue (value) {\n      this.file = value\n\n      if (!value) {\n        this.$refs.input.value = null\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}