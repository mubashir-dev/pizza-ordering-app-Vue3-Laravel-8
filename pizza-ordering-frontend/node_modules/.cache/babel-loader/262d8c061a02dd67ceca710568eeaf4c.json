{"ast":null,"code":"import { vModelCheckbox as _vModelCheckbox, createElementVNode as _createElementVNode, withDirectives as _withDirectives, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  class: \"checkbox\"\n};\n\nvar _hoisted_2 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"check\"\n}, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(_resolveDynamicComponent($props.type), {\n    class: \"checkbox-cell\"\n  }, {\n    default: _withCtx(function () {\n      return [_createElementVNode(\"label\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"checkbox\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return $setup.checked = $event;\n        })\n      }, null, 512\n      /* NEED_PATCH */\n      ), [[_vModelCheckbox, $setup.checked]]), _hoisted_2])];\n    }),\n    _: 1\n    /* STABLE */\n\n  });\n}","map":{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\CheckboxCell.vue"],"names":[],"mappings":";;AAEW,EAAA,KAAK,EAAC;;;8BAEX,mBAAA,CAA2B,MAA3B,EAA2B;AAArB,EAAA,KAAK,EAAC;AAAe,CAA3B,EAAmB,IAAnB,EAAmB,CAAA;AAAA;AAAnB,C;;;uBAHJ,YAAA,CAKY,wBAAA,CALI,MAAA,CAAA,IAKJ,CALZ,EAAoB;AAAE,IAAA,KAAK,EAAC;AAAR,GAApB,EAA2C;sBACzC;AAAA,aAGQ,CAHR,mBAAA,CAGQ,OAHR,EAAA,UAAA,EAGQ,C,gBAFN,mBAAA,CAAyC,OAAzC,EAAyC;AAAlC,QAAA,IAAI,EAAC,UAA6B;;iBAAT,MAAA,CAAA,OAAA,GAAO,M;;AAAE,OAAzC,E,IAAA,E;;AAAA,O,qBAAgC,MAAA,CAAA,O,GAE1B,EADN,UACM,CAHR,CAGQ,CAHR;AAAA,K,CADyC;;;;AAAA,GAA3C,C","sourcesContent":["<template>\n  <component :is=\"type\" class=\"checkbox-cell\">\n    <label class=\"checkbox\">\n      <input type=\"checkbox\" v-model=\"checked\">\n      <span class=\"check\"></span>\n    </label>\n  </component>\n</template>\n\n<script>\nimport { ref, watch } from 'vue'\n\nexport default {\n  name: 'CheckboxCell',\n  props: {\n    type: {\n      type: String,\n      default: 'td'\n    }\n  },\n  setup (props, { emit }) {\n    const checked = ref(false)\n\n    watch(checked, newVal => {\n      emit('checked', newVal)\n    })\n\n    return { checked }\n  }\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}