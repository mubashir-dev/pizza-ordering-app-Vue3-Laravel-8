{"ast":null,"code":"import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  class: \"flex items-center py-2 px-3 bg-gray-100 lg:bg-transparent\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_icon = _resolveComponent(\"icon\");\n\n  var _component_nav_bar_item = _resolveComponent(\"nav-bar-item\");\n\n  return _openBlock(), _createBlock(_component_nav_bar_item, {\n    type: \"block\",\n    \"has-divider\": $props.hasDivider,\n    active: $setup.isDropdownActive,\n    dropdown: \"\",\n    class: \"dropdown\",\n    onClick: $setup.toggle,\n    ref: \"root\"\n  }, {\n    default: _withCtx(function () {\n      return [_createElementVNode(\"a\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\"), _createVNode(_component_icon, {\n        path: $setup.toggleDropdownIcon,\n        class: \"hidden lg:inline-flex\"\n      }, null, 8\n      /* PROPS */\n      , [\"path\"])]), _createElementVNode(\"div\", {\n        class: _normalizeClass([\"text-sm border-gray-100 border-b lg:border-b-0 lg:border-gray-200 lg:border-t-2 lg:bg-white lg:absolute lg:top-full lg:left-0 lg:min-w-full lg:z-20 lg:shadow-md lg:rounded-b\", {\n          'lg:hidden': !$setup.isDropdownActive\n        }])\n      }, [_renderSlot(_ctx.$slots, \"dropdown\")], 2\n      /* CLASS */\n      )];\n    }),\n    _: 3\n    /* FORWARDED */\n\n  }, 8\n  /* PROPS */\n  , [\"has-divider\", \"active\", \"onClick\"]);\n}","map":{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\NavBarMenu.vue"],"names":[],"mappings":";;AAUO,EAAA,KAAK,EAAC;;;;;;;uBATX,YAAA,CAmBe,uBAnBf,EAmBe;AAlBb,IAAA,IAAI,EAAC,OAkBQ;AAjBZ,mBAAa,MAAA,CAAA,UAiBD;AAhBZ,IAAA,MAAM,EAAE,MAAA,CAAA,gBAgBI;AAfb,IAAA,QAAQ,EAAR,EAea;AAdb,IAAA,KAAK,EAAC,UAcO;AAbZ,IAAA,OAAK,EAAE,MAAA,CAAA,MAaK;AAZb,IAAA,GAAG,EAAC;AAYS,GAnBf,E;sBASE;AAAA,aAGI,CAHJ,mBAAA,CAGI,GAHJ,EAAA,UAAA,EAGI,CAFF,WAAA,CAAQ,IAAA,CAAA,MAAR,EAAQ,SAAR,CAEE,EADF,YAAA,CAAiE,eAAjE,EAAiE;AAA1D,QAAA,IAAI,EAAE,MAAA,CAAA,kBAAoD;AAAhC,QAAA,KAAK,EAAC;AAA0B,OAAjE,E,IAAA,E;;AAAA,Q,QAAA,CACE,CAHJ,CAGI,EACJ,mBAAA,CAKM,KALN,EAKM;AAJJ,QAAA,KAAK,EAAA,eAAA,CAAA,CAAC,+KAAD,EAAgL;AAAA,uBAAA,CAC/J,MAAA,CAAA;AAD+J,SAAhL,CAAA;AAID,OALN,E,CAIE,WAAA,CAAwB,IAAA,CAAA,MAAxB,EAAwB,UAAxB,C,CAJF,E;;AAAA,OADI,CAHJ;AAAA,K;;;;GATF,E;;AAAA,I,oCAAA,C","sourcesContent":["<template>\n  <nav-bar-item\n    type=\"block\"\n    :has-divider=\"hasDivider\"\n    :active=\"isDropdownActive\"\n    dropdown\n    class=\"dropdown\"\n    @click=\"toggle\"\n    ref=\"root\"\n  >\n    <a class=\"flex items-center py-2 px-3 bg-gray-100 lg:bg-transparent\">\n      <slot />\n      <icon :path=\"toggleDropdownIcon\" class=\"hidden lg:inline-flex\" />\n    </a>\n    <div\n      class=\"text-sm border-gray-100 border-b lg:border-b-0 lg:border-gray-200 lg:border-t-2 lg:bg-white lg:absolute lg:top-full lg:left-0 lg:min-w-full lg:z-20 lg:shadow-md lg:rounded-b\"\n      :class=\"{'lg:hidden':!isDropdownActive}\"\n    >\n      <slot name=\"dropdown\" />\n    </div>\n  </nav-bar-item>\n</template>\n\n<script>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js'\nimport NavBarItem from '@/components/NavBarItem'\nimport Icon from '@/components/Icon'\n\nexport default {\n  name: 'NavBarMenu',\n  components: { Icon, NavBarItem },\n  props: {\n    hasDivider: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup () {\n    const isDropdownActive = ref(false)\n\n    const toggleDropdownIcon = computed(() => isDropdownActive.value ? mdiChevronUp : mdiChevronDown)\n\n    const toggle = () => {\n      isDropdownActive.value = !isDropdownActive.value\n    }\n\n    const root = ref(null)\n\n    const forceClose = event => {\n      if (!root.value.$el.contains(event.target)) {\n        isDropdownActive.value = false\n      }\n    }\n\n    onMounted(() => {\n      window.addEventListener('click', forceClose)\n    })\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('click', forceClose)\n    })\n\n    return {\n      isDropdownActive,\n      toggleDropdownIcon,\n      toggle,\n      root\n    }\n  }\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}