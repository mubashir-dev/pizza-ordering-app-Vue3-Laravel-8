{"ast":null,"code":"import { ref } from 'vue';\nimport { mdiUpload } from '@mdi/js';\nimport JbButton from '@/components/JbButton';\nexport default {\n  name: 'FilePicker',\n  components: {\n    JbButton: JbButton\n  },\n  props: {\n    modelValue: [Object, File, Array],\n    label: String,\n    icon: String,\n    accept: {\n      type: String,\n      default: null\n    }\n  },\n  emits: ['update:modelValue'],\n  setup: function setup(props) {\n    var file = ref(props.modelValue);\n    return {\n      file: file,\n      mdiUpload: mdiUpload\n    };\n  },\n  methods: {\n    upload: function upload(event) {\n      var value = event.target.files || event.dataTransfer.files;\n      this.file = value[0];\n      this.$emit('update:modelValue', this.file); // Use this as an example for handling file uploads\n      // let formData = new FormData()\n      // formData.append('file', this.file)\n      // axios\n      //   .post(window.routeMediaStore, formData, {\n      //     headers: {\n      //       'Content-Type': 'multipart/form-data'\n      //     },\n      //     onUploadProgress: this.progressEvent\n      //   })\n      //   .then(r => {\n      //\n      //   })\n      //   .catch(err => {\n      //\n      //   })\n    } //,\n    // progressEvent (progressEvent) {\n    //   this.uploadPercent = Math.round(\n    //     (progressEvent.loaded * 100) / progressEvent.total\n    //   )\n    // }\n\n  },\n  watch: {\n    modelValue: function modelValue(value) {\n      this.file = value;\n\n      if (!value) {\n        this.$refs.input.value = null;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\FilePicker.vue"],"names":[],"mappings":"AAwBA,SAAS,GAAT,QAAoB,KAApB;AACA,SAAS,SAAT,QAA0B,SAA1B;AACA,OAAO,QAAP,MAAqB,uBAArB;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,YADO;AAEb,EAAA,UAAU,EAAE;AACV,IAAA,QAAO,EAAP;AADU,GAFC;AAKb,EAAA,KAAK,EAAE;AACL,IAAA,UAAU,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,KAAf,CADP;AAEL,IAAA,KAAK,EAAE,MAFF;AAGL,IAAA,IAAI,EAAE,MAHD;AAIL,IAAA,MAAM,EAAE;AACN,MAAA,IAAI,EAAE,MADA;AAEN,MAAA,OAAO,EAAE;AAFH;AAJH,GALM;AAcb,EAAA,KAAK,EAAE,CAAC,mBAAD,CAdM;AAeb,EAAA,KAfa,iBAeN,KAfM,EAeC;AACZ,QAAM,IAAG,GAAI,GAAG,CAAC,KAAK,CAAC,UAAP,CAAhB;AAEA,WAAO;AACL,MAAA,IAAI,EAAJ,IADK;AAEL,MAAA,SAAQ,EAAR;AAFK,KAAP;AAID,GAtBY;AAuBb,EAAA,OAAO,EAAE;AACP,IAAA,MADO,kBACC,KADD,EACQ;AACb,UAAM,KAAI,GAAI,KAAK,CAAC,MAAN,CAAa,KAAb,IAAsB,KAAK,CAAC,YAAN,CAAmB,KAAvD;AAEA,WAAK,IAAL,GAAY,KAAK,CAAC,CAAD,CAAjB;AACA,WAAK,KAAL,CAAW,mBAAX,EAAgC,KAAK,IAArC,EAJa,CAMb;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAxBM,CAwBN;AACD;AACA;AACA;AACA;AACA;;AA7BO,GAvBI;AAsDb,EAAA,KAAK,EAAE;AACL,IAAA,UADK,sBACO,KADP,EACc;AACjB,WAAK,IAAL,GAAY,KAAZ;;AAEA,UAAI,CAAC,KAAL,EAAY;AACV,aAAK,KAAL,CAAW,KAAX,CAAiB,KAAjB,GAAyB,IAAzB;AACF;AACF;AAPK;AAtDM,CAAf","sourcesContent":["<template>\n  <div class=\"flex items-stretch justify-start relative\">\n    <label class=\"inline-flex\">\n      <jb-button\n        as=\"a\"\n        label=\"Upload\"\n        :icon=\"mdiUpload\"\n        color=\"info\"\n        :class=\"{ 'rounded-r-none': file }\"\n      />\n      <input\n        type=\"file\"\n        ref=\"input\"\n        class=\"absolute top-0 left-0 w-full h-full opacity-0 outline-none cursor-pointer -z-1\"\n        :accept=\"accept\"\n        @input=\"upload\">\n    </label>\n    <div v-if=\"file\">\n      <span class=\"inline-flex px-4 py-2 justify-center bg-gray-100 border-gray-200 border rounded-r\">{{ file.name }}</span>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { mdiUpload } from '@mdi/js'\nimport JbButton from '@/components/JbButton'\n\nexport default {\n  name: 'FilePicker',\n  components: {\n    JbButton\n  },\n  props: {\n    modelValue: [Object, File, Array],\n    label: String,\n    icon: String,\n    accept: {\n      type: String,\n      default: null\n    }\n  },\n  emits: ['update:modelValue'],\n  setup (props) {\n    const file = ref(props.modelValue)\n\n    return {\n      file,\n      mdiUpload\n    }\n  },\n  methods: {\n    upload (event) {\n      const value = event.target.files || event.dataTransfer.files\n\n      this.file = value[0]\n      this.$emit('update:modelValue', this.file)\n\n      // Use this as an example for handling file uploads\n      // let formData = new FormData()\n      // formData.append('file', this.file)\n\n      // axios\n      //   .post(window.routeMediaStore, formData, {\n      //     headers: {\n      //       'Content-Type': 'multipart/form-data'\n      //     },\n      //     onUploadProgress: this.progressEvent\n      //   })\n      //   .then(r => {\n      //\n      //   })\n      //   .catch(err => {\n      //\n      //   })\n    }//,\n    // progressEvent (progressEvent) {\n    //   this.uploadPercent = Math.round(\n    //     (progressEvent.loaded * 100) / progressEvent.total\n    //   )\n    // }\n  },\n  watch: {\n    modelValue (value) {\n      this.file = value\n\n      if (!value) {\n        this.$refs.input.value = null\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}