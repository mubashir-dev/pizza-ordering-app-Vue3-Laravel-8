{"ast":null,"code":"import { computed, ref, onMounted, onBeforeUnmount } from 'vue';\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js';\nimport NavBarItem from '@/components/NavBarItem';\nimport Icon from '@/components/Icon';\nexport default {\n  name: 'NavBarMenu',\n  components: {\n    Icon: Icon,\n    NavBarItem: NavBarItem\n  },\n  props: {\n    hasDivider: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup: function setup() {\n    var isDropdownActive = ref(false);\n    var toggleDropdownIcon = computed(function () {\n      return isDropdownActive.value ? mdiChevronUp : mdiChevronDown;\n    });\n\n    var toggle = function toggle() {\n      isDropdownActive.value = !isDropdownActive.value;\n    };\n\n    var root = ref(null);\n\n    var forceClose = function forceClose(event) {\n      if (!root.value.$el.contains(event.target)) {\n        isDropdownActive.value = false;\n      }\n    };\n\n    onMounted(function () {\n      window.addEventListener('click', forceClose);\n    });\n    onBeforeUnmount(function () {\n      window.removeEventListener('click', forceClose);\n    });\n    return {\n      isDropdownActive: isDropdownActive,\n      toggleDropdownIcon: toggleDropdownIcon,\n      toggle: toggle,\n      root: root\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Users\\dev\\Desktop\\vue-basic\\pizza-ordering-app\\src\\components\\NavBarMenu.vue"],"names":[],"mappings":"AAwBA,SAAS,QAAT,EAAmB,GAAnB,EAAwB,SAAxB,EAAmC,eAAnC,QAA0D,KAA1D;AACA,SAAS,YAAT,EAAuB,cAAvB,QAA6C,SAA7C;AACA,OAAO,UAAP,MAAuB,yBAAvB;AACA,OAAO,IAAP,MAAiB,mBAAjB;AAEA,eAAe;AACb,EAAA,IAAI,EAAE,YADO;AAEb,EAAA,UAAU,EAAE;AAAE,IAAA,IAAI,EAAJ,IAAF;AAAQ,IAAA,UAAS,EAAT;AAAR,GAFC;AAGb,EAAA,KAAK,EAAE;AACL,IAAA,UAAU,EAAE;AACV,MAAA,IAAI,EAAE,OADI;AAEV,MAAA,OAAO,EAAE;AAFC;AADP,GAHM;AASb,EAAA,KATa,mBASJ;AACP,QAAM,gBAAe,GAAI,GAAG,CAAC,KAAD,CAA5B;AAEA,QAAM,kBAAiB,GAAI,QAAQ,CAAC;AAAA,aAAM,gBAAgB,CAAC,KAAjB,GAAyB,YAAzB,GAAwC,cAA9C;AAAA,KAAD,CAAnC;;AAEA,QAAM,MAAK,GAAI,SAAT,MAAS,GAAM;AACnB,MAAA,gBAAgB,CAAC,KAAjB,GAAyB,CAAC,gBAAgB,CAAC,KAA3C;AACF,KAFA;;AAIA,QAAM,IAAG,GAAI,GAAG,CAAC,IAAD,CAAhB;;AAEA,QAAM,UAAS,GAAI,SAAb,UAAa,CAAA,KAAI,EAAK;AAC1B,UAAI,CAAC,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,CAAwB,KAAK,CAAC,MAA9B,CAAL,EAA4C;AAC1C,QAAA,gBAAgB,CAAC,KAAjB,GAAyB,KAAzB;AACF;AACF,KAJA;;AAMA,IAAA,SAAS,CAAC,YAAM;AACd,MAAA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,UAAjC;AACD,KAFQ,CAAT;AAIA,IAAA,eAAe,CAAC,YAAM;AACpB,MAAA,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,UAApC;AACD,KAFc,CAAf;AAIA,WAAO;AACL,MAAA,gBAAgB,EAAhB,gBADK;AAEL,MAAA,kBAAkB,EAAlB,kBAFK;AAGL,MAAA,MAAM,EAAN,MAHK;AAIL,MAAA,IAAG,EAAH;AAJK,KAAP;AAMF;AAxCa,CAAf","sourcesContent":["<template>\n  <nav-bar-item\n    type=\"block\"\n    :has-divider=\"hasDivider\"\n    :active=\"isDropdownActive\"\n    dropdown\n    class=\"dropdown\"\n    @click=\"toggle\"\n    ref=\"root\"\n  >\n    <a class=\"flex items-center py-2 px-3 bg-gray-100 lg:bg-transparent\">\n      <slot />\n      <icon :path=\"toggleDropdownIcon\" class=\"hidden lg:inline-flex\" />\n    </a>\n    <div\n      class=\"text-sm border-gray-100 border-b lg:border-b-0 lg:border-gray-200 lg:border-t-2 lg:bg-white lg:absolute lg:top-full lg:left-0 lg:min-w-full lg:z-20 lg:shadow-md lg:rounded-b\"\n      :class=\"{'lg:hidden':!isDropdownActive}\"\n    >\n      <slot name=\"dropdown\" />\n    </div>\n  </nav-bar-item>\n</template>\n\n<script>\nimport { computed, ref, onMounted, onBeforeUnmount } from 'vue'\nimport { mdiChevronUp, mdiChevronDown } from '@mdi/js'\nimport NavBarItem from '@/components/NavBarItem'\nimport Icon from '@/components/Icon'\n\nexport default {\n  name: 'NavBarMenu',\n  components: { Icon, NavBarItem },\n  props: {\n    hasDivider: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup () {\n    const isDropdownActive = ref(false)\n\n    const toggleDropdownIcon = computed(() => isDropdownActive.value ? mdiChevronUp : mdiChevronDown)\n\n    const toggle = () => {\n      isDropdownActive.value = !isDropdownActive.value\n    }\n\n    const root = ref(null)\n\n    const forceClose = event => {\n      if (!root.value.$el.contains(event.target)) {\n        isDropdownActive.value = false\n      }\n    }\n\n    onMounted(() => {\n      window.addEventListener('click', forceClose)\n    })\n\n    onBeforeUnmount(() => {\n      window.removeEventListener('click', forceClose)\n    })\n\n    return {\n      isDropdownActive,\n      toggleDropdownIcon,\n      toggle,\n      root\n    }\n  }\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}